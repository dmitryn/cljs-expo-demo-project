{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name cljs-expo-project.handlers, :imports nil, :requires {re-frame.core re-frame.core, s cljs.spec, cljs.spec cljs.spec, clojure.spec cljs.spec, db cljs-expo-project.db, cljs-expo-project.db cljs-expo-project.db}, :uses {app-db cljs-expo-project.db, reg-event-db re-frame.core, ->interceptor re-frame.core}, :defs {check-and-throw {:protocol-inline nil, :meta {:file "/Users/trybeee/Code/cljs-expo-project/src/cljs_expo_project/handlers.cljs", :line 11, :column 7, :end-line 11, :end-column 22, :arglists (quote ([spec db])), :doc "Throw an exception if db doesn't have a valid spec."}, :name cljs-expo-project.handlers/check-and-throw, :variadic false, :file "/Users/trybeee/Code/cljs-expo-project/src/cljs_expo_project/handlers.cljs", :end-column 22, :method-params ([spec db]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec db])), :doc "Throw an exception if db doesn't have a valid spec."}, validate-spec {:name cljs-expo-project.handlers/validate-spec, :file "/Users/trybeee/Code/cljs-expo-project/src/cljs_expo_project/handlers.cljs", :line 18, :column 1, :end-line 18, :end-column 19, :meta {:file "/Users/trybeee/Code/cljs-expo-project/src/cljs_expo_project/handlers.cljs", :line 18, :column 6, :end-line 18, :end-column 19}}}, :require-macros {s cljs.spec, cljs.spec cljs.spec, clojure.spec cljs.spec}, :cljs.analyzer/constants {:seen #{:initialize-db :cljs-expo-project.db/app-db :set-greeting :db :after :id :effects :validate-spec :greeting}, :order [:id :validate-spec :after :db :effects :cljs-expo-project.db/app-db :initialize-db :set-greeting :greeting]}, :doc nil}